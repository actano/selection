(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("_"));
	else if(typeof define === 'function' && define.amd)
		define(["_"], factory);
	else if(typeof exports === 'object')
		exports["Yourchoice"] = factory(require("_"));
	else
		root["Yourchoice"] = factory(root["_"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  module.exports = __webpack_require__(1).Selection;

	}).call(this);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var Emitter, Selection, array, assert,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  Emitter = __webpack_require__(2);

	  assert = __webpack_require__(3);

	  array = __webpack_require__(4);

	  Selection = (function(superClass) {
	    extend(Selection, superClass);

	    function Selection(iteratorFactory) {
	      this.iteratorFactory = iteratorFactory;
	      this.selectedItems = [];
	      this.lastAnchor = null;
	    }

	    Selection.prototype.toggle = function(item) {
	      if (this._isSelected(item)) {
	        this.lastAnchor = null;
	        this._removeFromSelection(item);
	        item.deselect();
	      } else {
	        this.lastAnchor = item;
	        this._addToSelection(item);
	        item.select();
	      }
	      return this._emitChangeEvent();
	    };

	    Selection.prototype.replace = function(item) {
	      var i, len, oldSelectedItem, ref;
	      if (!this._isOnlySelectedItem(item)) {
	        this.lastAnchor = item;
	        ref = this.selectedItems;
	        for (i = 0, len = ref.length; i < len; i++) {
	          oldSelectedItem = ref[i];
	          oldSelectedItem.deselect();
	        }
	        this.selectedItems = [item];
	        item.select();
	        return this._emitChangeEvent();
	      }
	    };

	    Selection.prototype.remove = function(items) {
	      var atLeastOneItemRemoved, i, item, len;
	      atLeastOneItemRemoved = false;
	      for (i = 0, len = items.length; i < len; i++) {
	        item = items[i];
	        if (this._isSelected(item)) {
	          this._removeFromSelection(item);
	          item.deselect();
	          atLeastOneItemRemoved = true;
	        }
	      }
	      this.lastAnchor = null;
	      if (atLeastOneItemRemoved) {
	        return this._emitChangeEvent();
	      }
	    };

	    Selection.prototype.removeAll = function() {
	      return this.remove(this.selectedItems.slice());
	    };

	    Selection.prototype.rangeTo = function(endItem) {
	      var oldSelectedItems, startItem;
	      oldSelectedItems = this.selectedItems.slice();
	      startItem = this._getRangeStart();
	      assert(startItem != null, 'rangeTo: no start item');
	      if ((this.lastAnchor != null) || this.selectedItems.length > 0) {
	        this.lastAnchor = startItem;
	      }
	      this._deselectItemsConnectedWith(startItem);
	      this._performActionInRange(startItem, endItem, (function(_this) {
	        return function(item) {
	          _this._addToSelection(item);
	          return item.select();
	        };
	      })(this));
	      if (!array.sameMembers(oldSelectedItems, this.selectedItems)) {
	        return this._emitChangeEvent();
	      }
	    };

	    Selection.prototype._getRangeStart = function() {
	      var iterator;
	      if (this.lastAnchor != null) {
	        return this.lastAnchor;
	      } else {
	        if (this.selectedItems.length > 0) {
	          return this._getBottommostSelectedItem();
	        } else {
	          iterator = this.iteratorFactory();
	          return iterator.next().value;
	        }
	      }
	    };

	    Selection.prototype._emitChangeEvent = function() {
	      return this.emit('change', this.selectedItems.slice());
	    };

	    Selection.prototype._getBottommostSelectedItem = function() {
	      var done, item, iterator, previousItem, ref;
	      iterator = this.iteratorFactory();
	      previousItem = null;
	      while (true) {
	        ref = iterator.next(), item = ref.value, done = ref.done;
	        if (done) {
	          return previousItem;
	        } else if (this._isSelected(item)) {
	          previousItem = item;
	        }
	      }
	    };

	    Selection.prototype._performActionInRange = function(startItem, endItem, action) {
	      var bottomOfRangeFound, current, done, item, iterator, ref;
	      iterator = this.iteratorFactory();
	      assert(startItem != null, '_performActionInRange: no start item');
	      assert(endItem != null, '_performActionInRange: no end item');
	      if (startItem === endItem) {
	        action(startItem);
	        return;
	      }
	      while (!(current = iterator.next()).done) {
	        item = current.value;
	        if (item === startItem || item === endItem) {
	          break;
	        }
	      }
	      action(item);
	      bottomOfRangeFound = false;
	      while (true) {
	        ref = iterator.next(), item = ref.value, done = ref.done;
	        if (done) {
	          break;
	        }
	        action(item);
	        bottomOfRangeFound = item === startItem || item === endItem;
	        if (bottomOfRangeFound) {
	          break;
	        }
	      }
	      return assert(bottomOfRangeFound, '_performActionInRange: bottom of range not found');
	    };

	    Selection.prototype._isOnlySelectedItem = function(item) {
	      return this.selectedItems.length === 1 && this._isSelected(item);
	    };

	    Selection.prototype._isSelected = function(item) {
	      return this.selectedItems.indexOf(item) !== -1;
	    };

	    Selection.prototype._addToSelection = function(item) {
	      if (!this._isSelected(item)) {
	        return this.selectedItems.push(item);
	      }
	    };

	    Selection.prototype._removeFromSelection = function(item) {
	      var index;
	      if (this._isSelected(item)) {
	        index = this.selectedItems.indexOf(item);
	        return this.selectedItems.splice(index, 1);
	      }
	    };

	    Selection.prototype._deselectItemsConnectedWith = function(targetItem) {
	      var done, i, isRangeWithTargetItem, item, iterator, len, range, ref, results;
	      iterator = this.iteratorFactory();
	      range = [];
	      isRangeWithTargetItem = false;
	      while (true) {
	        ref = iterator.next(), item = ref.value, done = ref.done;
	        if (done) {
	          break;
	        }
	        if (this._isSelected(item)) {
	          range.push(item);
	          if (item === targetItem) {
	            isRangeWithTargetItem = true;
	          }
	        } else {
	          if (isRangeWithTargetItem) {
	            break;
	          } else {
	            range = [];
	          }
	        }
	      }
	      results = [];
	      for (i = 0, len = range.length; i < len; i++) {
	        item = range[i];
	        this._removeFromSelection(item);
	        results.push(item.deselect());
	      }
	      return results;
	    };

	    return Selection;

	  })(Emitter);

	  module.exports = {
	    Selection: Selection
	  };

	}).call(this);


/***/ },
/* 2 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 3 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var slice = [].slice;

	  module.exports = function() {
	    var args;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    if ((typeof console !== "undefined" && console !== null ? console.assert : void 0) != null) {
	      return console.assert.apply(console, args);
	    }
	  };

	}).call(this);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var _, sameMembers;

	  _ = __webpack_require__(5);

	  sameMembers = function(array1, array2) {
	    if (array1.length !== array2.length) {
	      return false;
	    }
	    return _.union(array1, array2).length === array2.length;
	  };

	  module.exports = {
	    sameMembers: sameMembers
	  };

	}).call(this);


/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }
/******/ ])
});
;